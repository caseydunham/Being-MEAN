extends layout

block content
  h1 Server Side JavaScript Injection
  p.
    For many years client-side JavaScript exploitation has been the focus of
    web application security research - with the advent of JavaScript run on
    the server in recent years, new exploitation research has taken off. As
    the web moved toward ever-increasing use of JavaScript to make sites
    reactive and easier to develop, Server Side JavaScript Injection evolved
    as one method for code execution against the host server.
  h2 Goals
  ol
    li Verify that the below form is vulnerable by causing a delay in the server response
    li Exploit the injection to read /etc/passwd
    li Can you get a remote shell?
  div
    form(name="search", method="post")
          div.input
              input(type="text", name="query", placeholder="Search...")
          div.actions
              input(type="submit", value="Go")
  h2 References
  ul
    li
      a(href='https://ckarande.gitbooks.io/owasp-nodegoat-tutorial/content/tutorial/a1_-_server_side_js_injection.html') https://ckarande.gitbooks.io/owasp-nodegoat-tutorial/content/tutorial/a1_-_server_side_js_injection.html
    li
      a(href='https://nvisium.com/blog/2015/08/27/the-evil-side-of-javascript-server-side/') https://nvisium.com/blog/2015/08/27/the-evil-side-of-javascript-server-side/
    li
      a(href='https://wiremask.eu/writeups/reverse-shell-on-a-nodejs-application/') https://wiremask.eu/writeups/reverse-shell-on-a-nodejs-application/
  p
    //- TODO: Figure out how to properly reroute to index
    a(href="http://localhost:3000") Return to Index
